}
for (i in columns[7:27]) {
cor.test(cars[[columns[i]]], minPrice, xlab = columns[i], ylab = "MinimumPrice")
#plot(log(cars[[columns[i]]]), minPrice, xlab = paste("Log(",columns[i],")"), ylab = "MinimumPrice")
#plot(cars[[columns[i]]], log(minPrice), xlab = columns[i], ylab = "Log(MinimumPrice)")
#plot(log(cars[[columns[i]]]), log(minPrice), xlab = paste("Log(",columns[i],")"), ylab = "Log(MinimumPrice)")
}
for (i in columns[7:27]) {
cor.test(cars[[columns[i]]], minPrice, method="spearman")
#plot(log(cars[[columns[i]]]), minPrice, xlab = paste("Log(",columns[i],")"), ylab = "MinimumPrice")
#plot(cars[[columns[i]]], log(minPrice), xlab = columns[i], ylab = "Log(MinimumPrice)")
#plot(log(cars[[columns[i]]]), log(minPrice), xlab = paste("Log(",columns[i],")"), ylab = "Log(MinimumPrice)")
}
for (i in columns[7:27]) {
cor.test(cars[[i]], minPrice, method="spearman")
#plot(log(cars[[columns[i]]]), minPrice, xlab = paste("Log(",columns[i],")"), ylab = "MinimumPrice")
#plot(cars[[columns[i]]], log(minPrice), xlab = columns[i], ylab = "Log(MinimumPrice)")
#plot(log(cars[[columns[i]]]), log(minPrice), xlab = paste("Log(",columns[i],")"), ylab = "Log(MinimumPrice)")
}
cor.test(cars[[i]], minPrice, method="spearman")
print(cor.test(cars[[i]], minPrice, method="spearman"))
for (i in columns[7:27]) {
print(cor.test(cars[[i]], minPrice, method="spearman"))
#plot(log(cars[[columns[i]]]), minPrice, xlab = paste("Log(",columns[i],")"), ylab = "MinimumPrice")
#plot(cars[[columns[i]]], log(minPrice), xlab = columns[i], ylab = "Log(MinimumPrice)")
#plot(log(cars[[columns[i]]]), log(minPrice), xlab = paste("Log(",columns[i],")"), ylab = "Log(MinimumPrice)")
}
for (i in list(9,10,11,16,18,26)) {
summary(aov(minPrice~cars[[columns[i]]]))
summary(aov(minPrice)~cars[[columns[i]]]))
}
for (i in list(9,10,11,16,18,26)) {
summary(aov(minPrice~cars[[columns[i]]]))
summary(aov((minPrice)~cars[[columns[i]]]))
}
for (i in list(9,10,11,16,18,26)) {
summary(aov(minPrice~cars[[columns[i]]]))
summary(aov((minPrice)~cars[[columns[i]]]))
}
# Use ANOVA in categorical features
for (i in list(9,10,11,16,18,26)) {
print(summary(aov(minPrice~cars[[columns[i]]])))
print(summary(aov((minPrice)~cars[[columns[i]]])))
}
# Use ANOVA in categorical features
for (i in list(9,10,11,16,18,26)) {
print(summary(aov(minPrice~cars[[columns[i]]])))
print(summary(aov(log(minPrice)~cars[[columns[i]]])))
}
# STEP 3
# Check for spearman correlation
for (i in list(7,8,12,13,14,15,17,19,20,21,22,23,24,25,27)) {
print(cor.test(cars[[caolumns[i]]], minPrice, method="spearman"))
}
for (i in list(7,8,12,13,14,15,17,19,20,21,22,23,24,25,27)) {
print(cor.test(cars[[columns[i]]], minPrice, method="spearman"))
}
# STEP 4
# Use ANOVA in categorical features
for (i in list(9,10,11,16,18,26)) {
print(summary(aov(minPrice~cars[[columns[i]]])))
print(summary(aov(log(minPrice)~cars[[columns[i]]])))
}
for (i in list(9,10,11,16)) {
print(summary(aov(minPrice~cars[[columns[i]]])))
print(summary(aov(log(minPrice)~cars[[columns[i]]])))
}
for (i in list(9,10,11,16,18,26)) {
print(summary(aov(minPrice~cars[[columns[i]]])))
print(summary(aov(log(minPrice)~cars[[columns[i]]])))
}
for (i in list(9,10,11,16,18,26)) {
print(summary(aov(minPrice~factor(cars[[columns[i]]]))))
print(summary(aov(log(minPrice)~factor(cars[[columns[i]]]))))
}
# STEP 4
# Use ANOVA in categorical features
for (i in list(9,10,11,16,18,26)) {
print(summary(aov(minPrice~cars[[columns[i]]])))
print(summary(aov(log(minPrice)~cars[[columns[i]]])))
}
# Use ANOVA in categorical features
for (i in list(9,10,11,16,18,26)) {
print(summary(aov(minPrice~factor(cars[[columns[i]]]))))
print(summary(aov(log(minPrice)~factor(cars[[columns[i]]]))))
}
for (i in list(9,10,11,16,18)) {
mod.var <- aov(minPrice~cars[[columns[i]]])
mod.logvar <-aov(log(minPrice)~cars[[columns[i]]])
print(PostHocTest(mod.var,method="hsd"))
print(PostHocTest(mod.logvar,method="hsd"))
}
install.packages("DescTools")
library("DescTools")
# STEP 5
for (i in list(9,10,11,16,18)) {
mod.var <- aov(minPrice~cars[[columns[i]]])
mod.logvar <-aov(log(minPrice)~cars[[columns[i]]])
print(PostHocTest(mod.var,method="hsd"))
print(PostHocTest(mod.logvar,method="hsd"))
}
# STEP 5
for (i in list(9,10,11,16,18)) {
mod.var <- aov(minPrice~factor(cars[[columns[i]]]))
mod.logvar <-aov(log(minPrice)~factor(cars[[columns[i]]]))
print(PostHocTest(mod.var,method="hsd"))
print(PostHocTest(mod.logvar,method="hsd"))
}
#install.packages("DescTools") # install for posthoc test
#Cars manufacters Barplot
library("here") # library to work with relative paths
library("readxl") # library to read excel files (better than csv)
library("DescTools") #library for posthoc test
cars <-read_excel(here("Dataset", "93Cars_values.xlsx")) # read excel
dev.off(dev.list()["RStudioGD"])       # uncomment to clear all plots
par(mar=c(5,4.5,1.3,1.3)) # change params for normal-sized plotting
columns <- colnames(cars)  # save column names as a list
midPrice <- cars$MidrangePrice
# 4) log(X) - log(Y)
par(mfrow = c(3, 4))  # Set up a 3 x 4 plotting space
for (i in list(7,8,12,13,14,15,17,19,20,21,22,23,24,25,27)) {
plot(cars[[columns[i]]], midPrice, xlab = columns[i], ylab = "MidrangePrice")
plot(log(cars[[columns[i]]]), midPrice, xlab = paste("Log(",columns[i],")"), ylab = "MidrangePrice")
plot(cars[[columns[i]]], log(midPrice), xlab = columns[i], ylab = "Log(MidrangePrice)")
plot(log(cars[[columns[i]]]), log(midPrice), xlab = paste("Log(",columns[i],")"), ylab = "Log(MidrangePrice)")
}
# 2) X - log(Y)
par(mfrow = c(3, 4))  # Set up a 3 x 4 plotting space
for (i in list(9,10,11,16,18,26)) {
boxplot(midPrice~cars[[columns[i]]], xlab = columns[i], ylab = "MidrangePrice")
boxplot(log(midPrice)~cars[[columns[i]]], xlab = columns[i], ylab = "Log(MidrangePrice)")
}
for (i in list(7,8,12,13,14,15,17,19,20,21,22,23,24,25,27)) {
print(cor.test(cars[[columns[i]]], midPrice, method="spearman"))
}
# Use ANOVA in categorical features
for (i in list(9,10,11,16,18,26)) {
print(summary(aov(midPrice~factor(cars[[columns[i]]]))))
print(summary(aov(log(midPrice)~factor(cars[[columns[i]]]))))
}
for (i in list(9,10,11,16,18)) {
mod.var <- aov(minPrice~factor(cars[[columns[i]]]))
mod.logvar <-aov(log(minPrice)~factor(cars[[columns[i]]]))
print(PostHocTest(mod.var,method="hsd"))
print(PostHocTest(mod.logvar,method="hsd"))
}
#install.packages("DescTools") # install for posthoc test
#Cars manufacters Barplot
library("here") # library to work with relative paths
library("readxl") # library to read excel files (better than csv)
library("DescTools") #library for posthoc test
cars <-read_excel(here("Dataset", "93Cars_values.xlsx")) # read excel
dev.off(dev.list()["RStudioGD"])       # uncomment to clear all plots
par(mar=c(5,4.5,1.3,1.3)) # change params for normal-sized plotting
columns <- colnames(cars)  # save column names as a list
minPrice <- cars$MinimumPrice
#      PLOTS      #
# STEP 1
re 4 plots for each set of 2 variables.
# 1) X - Y
# 2) log(X) - Y
# 3) X - log(Y)
# 4) log(X) - log(Y)
par(mfrow = c(3, 4))  # Set up a 3 x 4 plotting space
for (i in list(7,8,12,13,14,15,17,19,20,21,22,23,24,25,27)) {
plot(cars[[columns[i]]], minPrice, xlab = columns[i], ylab = "MinimumPrice")
plot(log(cars[[columns[i]]]), minPrice, xlab = paste("Log(",columns[i],")"), ylab = "MinimumPrice")
plot(cars[[columns[i]]], log(minPrice), xlab = columns[i], ylab = "Log(MinimumPrice)")
plot(log(cars[[columns[i]]]), log(minPrice), xlab = paste("Log(",columns[i],")"), ylab = "Log(MinimumPrice)")
}
# Box Plots of 2 variables and their log()
# There are 2 plots for each set of 2 variables.
# 1) X - Y
# 2) X - log(Y)
par(mfrow = c(3, 4))  # Set up a 3 x 4 plotting space
for (i in list(9,10,11,16,18,26)) {
boxplot(minPrice~cars[[columns[i]]], xlab = columns[i], ylab = "MinimumPrice")
boxplot(log(minPrice)~cars[[columns[i]]], xlab = columns[i], ylab = "Log(MinimumPrice)")
}
# STEP 2
# No need to order any factor levels
# STEP 3
# Check for spearman correlation
for (i in list(7,8,12,13,14,15,17,19,20,21,22,23,24,25,27)) {
print(cor.test(cars[[columns[i]]], minPrice, method="spearman"))
}
# STEP 4
# Use ANOVA in categorical features
for (i in list(9,10,11,16,18,26)) {
print(summary(aov(minPrice~factor(cars[[columns[i]]]))))
print(summary(aov(log(minPrice)~factor(cars[[columns[i]]]))))
}
# STEP 5
# Use PostHocTest to find levels that are significantly different
for (i in list(9,10,11,16,18)) {
mod.var <- aov(minPrice~factor(cars[[columns[i]]]))
mod.logvar <-aov(log(minPrice)~factor(cars[[columns[i]]]))
print(PostHocTest(mod.var,method="hsd"))
print(PostHocTest(mod.logvar,method="hsd"))
}
airBags <- factor(cars$AirBags)
levels(airBags)
levels(airBags) [ c(1,2) ] <- “1,2”
levels(airBags) [ c(1,2) ] <- "1,2"
levels(airBags)
levels(airBags)
mod.airBags <- aov(minPrice~airbags)
mod.airBags <- aov(minPrice~airBags)
summary(mod.airBags)
print(PostHocTest(mod.airBags,method="hsd"))
airBags <- factor(cars$AirBags,levels=c(0,1,2), ordered=T)
levels(airBags)
levels(airBags) [ c(1,2) ] <- "1,2"
levels(airBags)
mod.airBags <- aov(minPrice~airBags)
print(PostHocTest(mod.airBags,method="hsd"))
airBags <- factor(cars$AirBags,levels=c("0","1","2"), ordered=T)
levels(airBags)
levels(airBags) [ c(1,2) ] <- "1,2"
levels(airBags)
airBags <- factor(cars$AirBags)
levels(airBags)
airBags <- factor(cars$AirBags)
levels(airBags)
levels(airBags) [ c("1","2") ] <- "1,2"
levels(airBags)
mod.airBags <- aov(minPrice~airBags)
print(PostHocTest(mod.airBags,method="hsd"))
airBags <- factor(cars$AirBags)
levels(airBags)
levels(airBags) [ c(1,2) ] <- "1,2"
levels(airBags)
airBags <- factor(cars$AirBags)
levels(airBags)
levels(airBags) [ c(2) ] <- "1,2"
levels(airBags)
airBags <- factor(cars$AirBags)
levels(airBags)
levels(airBags) [ c(2,3) ] <- "1,2"
levels(airBags)
mod.airBags <- aov(minPrice~airBags)
print(PostHocTest(mod.airBags,method="hsd"))
# DriveTrainType
driveTrainType <- factor(cars$DriveTrainType)
levels(driveTrainType)
levels(driveTrainType) [ c(2,3) ] <- "1,2"
levels(driveTrainType)
mod.driveTrainType <- aov(minPrice~driveTrainType)
print(PostHocTest(mod.driveTrainType,method="hsd"))
# NumberOfCylinders
cylinders <- factor(cars$NumberOfCylinders)
levels(cylinders)
levels(cylinders) [ c(1,2) ] <- "3,4"
levels(cylinders)
levels(cylinders) [ c(2,3) ] <- "5,6"
levels(cylinders)
mod.cylinders <- aov(minPrice~cylinders)
print(PostHocTest(mod.cylinders,method="hsd"))
# Passengers
passengers <- factor(cars$Passengers)
levels(passengers)
levels(passengers) [ c(2,3) ] <- "4,5"
levels(passengers)
levels(passengers) [ c(3,4,5) ] <- "6,7,8"
levels(passengers)
mod.passengers <- aov(minPrice~passengers)
print(PostHocTest(mod.passengers,method="hsd"))
# Passengers
passengers <- factor(cars$Passengers)
levels(passengers)
levels(passengers) [ c(2,3) ] <- "4,5"
levels(passengers)
levels(passengers) [ c(4,5) ] <- "7,8"
levels(passengers)
mod.passengers <- aov(minPrice~passengers)
print(PostHocTest(mod.passengers,method="hsd"))
# Passengers
passengers <- factor(cars$Passengers)
levels(passengers)
levels(passengers) [ c(2,3) ] <- "4,5"
levels(passengers)
levels(passengers) [ c(3,4,5) ] <- "6,7,8"
levels(passengers)
mod.passengers <- aov(minPrice~passengers)
print(PostHocTest(mod.passengers,method="hsd"))
plot(airBags,minPrice)
# Model 1 = CityMPG vs MinimumPrice
cityMPG = cars$CityMPG
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+passengers+
airBags:driveTrainType+airBags:cylinders+airBags:passengers+
driveTrainType:cylinders+driveTrainType:passengers+
cylinders:passengers)
summary.lm(model1)
library("olsrr")
#install.packages("DescTools") # install for posthoc test
install.packages("olsrr")
model.dim<-ols_step_both_p(model1)
model.dim
library("olsrr") #library for stepwise variable selection
model.dim<-ols_step_both_p(model1)
model.dim
# Model 1 = CityMPG vs MinimumPrice
cityMPG = cars$CityMPG
model1 <- lm(minPrice~cityMPG)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model.dim
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model1 <- lm(minPrice~cityMPG+airBags)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model.dim
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model.dim
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+passengers)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model.dim
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+passengers)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model.dim
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+passengers+airBags)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model.dim
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+passengers)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model.dim
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+passengers+airBags:driveTrainType)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model.dim
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model.dim
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+passengers+airBags:driveTrainType+cylinders:passengers)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+passengers+airBags:driveTrainType)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:passengers)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model.dim
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:passengers)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model.dim
View(model.dim)
# Model 1 = CityMPG vs MinimumPrice
cityMPG = cars$CityMPG
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:passengers+driveTrainType:passengers)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
nrow(driveTrainType)
nrow(passengers)
nrow(cityMPG)
# Model 1 = CityMPG vs MinimumPrice
cityMPG = cars$CityMPG
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:passengers)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model.dim
summary(model.dim$model)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
summary(model.dim$model)
# Model 1 = CityMPG vs MinimumPrice
cityMPG = cars$CityMPG
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+airBags:driveTrainType)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model.dim
summary(model.dim$model)
# Model 1 = CityMPG vs MinimumPrice
cityMPG = cars$CityMPG
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:passengers)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model.dim
summary(model.dim$model)
plot(cityMPG,minPrice,type='n',ylab="CityMPG",xlab="MinimumPrice")
points(sS[[1]],sE[[1]],pch=16)
points(sS[[2]],sE[[2]])
plot(cityMPG,minPrice,type='n',ylab="CityMPG",xlab="MinimumPrice")
plot(cityMPG,minPrice,type='n',ylab="MinimumPrice",xlab="CityMPG")
dev.off(dev.list()["RStudioGD"])       # uncomment to clear all plots
# Model 1 = CityMPG vs MinimumPrice
cityMPG = cars$CityMPG
model1 <- lm(minPrice~cityMPG+airBags+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:passengers)
#+driveTrainType+cylinders+passengers+airBags:driveTrainType+airBags:cylinders+airBags:passengers+driveTrainType:cylinders+driveTrainType:passengers+cylinders:passengers)
summary.lm(model1)
model.dim<-ols_step_both_p(model1)
model.dim
summary(model.dim$model)
plot(cityMPG,minPrice,type='n',ylab="MinimumPrice",xlab="CityMPG")
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG")
points(cityMPG,pch=16)
points(cityMPG,cityMPG,pch=16)
dev.off(dev.list()["RStudioGD"])       # uncomment to clear all plots
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG")
points(cityMPG,cityMPG,pch=16)
points(minPrice,minPrice)
abline(22.8074,-0.4610)
plot(cityMPG,minPrice,type='n',ylab="MinimumPrice",xlab="CityMPG")
points(cityMPG,cityMPG,pch=16)
points(minPrice,minPrice)
abline(22.8074,-0.4610)
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG")
#points(cityMPG,cityMPG,pch=16)
#points(minPrice,minPrice)
abline(22.8074,-0.4610)
points(cityMPG[[1]],cityMPG[[1]],pch=16)
points(cityMPG[[1]],cityMPG[[1]],pch=16)
points(minPrice[[2]],minPrice[[2]])
points(minPrice[2],minPrice[2])
points(cityMPG[1],cityMPG[1],pch=16)
points(cityMPG[1],pch=16)
points(cityMPG[[1]],pch=16)
points(cityMPG,pch=16)
points(minPrice)
abline(22.8074+14.9006,-0.4610)
abline(22.8074+4.7288,-0.4610)
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG")
abline(22.8074,-0.4610)
abline(22.8074+14.9006,-0.4610)
abline(22.8074+4.7288,-0.4610)
points(cityMPG,minPrice,pch=16)
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG")
points(cityMPG[[1]],minPrice[[1]],pch=16)
points(minPrice)
abline(22.8074,-0.4610)
abline(22.8074+14.9006,-0.4610)
abline(22.8074+4.7288,-0.4610)
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG")
points(cityMPG[[0]],minPrice[[1]],pch=16)
points(minPrice)
abline(22.8074,-0.4610)
abline(22.8074+14.9006,-0.4610)
abline(22.8074+4.7288,-0.4610)
abline(22.8074+4.7288,-0.4610,col='red')
points(cityMPG[airBags]==0,minPrice[[1]],pch=16)
points(cityMPG[airBags]==0,minPrice[airBags]==0,pch=16)
points(cityMPG[airBags]==0,minPrice[airBags]==0,pch=16)
points(cityMPG[airBags]==1,minPrice[airBags]==1,pch=16)
points(cityMPG[airBags]=="1",minPrice[airBags]=="1",pch=16)
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG")
abline(22.8074,-0.4610)
abline(22.8074+4.7288,-0.4610,col='red')
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG",pch=16)
abline(22.8074,-0.4610)
abline(22.8074+4.7288,-0.4610,col='red')
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG",pch=21)
abline(22.8074,-0.4610)
abline(22.8074+4.7288,-0.4610,col='red')
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG",pch=21)
abline(22.8074,-0.4610)
abline(22.8074+4.7288,-0.4610,col='red')
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG",pch=20)
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG",pch=20)
abline(22.8074,-0.4610)
abline(22.8074+4.7288,-0.4610,col='red')
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG",pch=21)
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG",pch=5)
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG",pch=5)
abline(22.8074,-0.4610)
abline(22.8074+4.7288,-0.4610,col='red')
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG",pch=10)
abline(22.8074,-0.4610)
abline(22.8074+4.7288,-0.4610,col='red')
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG")
abline(22.8074,-0.4610)
abline(22.8074+4.7288,-0.4610,col='red')
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG")
abline(22.8074,-0.4610)
abline(22.8074+4.7288,-0.4610,col='red')
abline(22.8074+6.3879+14.9006+4.7288-0.4610-0.9275-4.3363,-0.4610,col='blue')
plot(cityMPG,minPrice,ylab="MinimumPrice",xlab="CityMPG")
abline(22.8074,-0.4610)
abline(22.8074+4.7288,-0.4610,col='red')
